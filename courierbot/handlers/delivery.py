from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import CallbackQuery
import re
from courierbot.db import BotDBClass
import courierbot.kb
from decimal import Decimal

from pathlib import Path

BotDB=BotDBClass(Path(__file__).resolve().parent.parent.parent/'db.sqlite3')


class OrderDelivery(StatesGroup):
    waiting_for_delivery_number = State()
    waiting_for_change_delivery_status = State()
    waiting_for_spent_sum = State()


# –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: –µ—Å—Ç—å –≤—Ç–æ—Ä–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç
async def delivery_start(clbck: CallbackQuery,state: FSMContext):

    deliveres=BotDB.get_deliveres_on_work(BotDB.get_user_id(clbck.message.chat.id))
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    BotDB.check_deliveres_on_waitnig(BotDB.get_user_id(clbck.message.chat.id))
    for delivery in BotDB.get_deliveres_on_work(BotDB.get_user_id(clbck.message.chat.id)):
        keyboard.add(str(delivery[9]))
    keyboard.add('–û—Ç–º–µ–Ω–∞')
    await clbck.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç–∞–≤–∫—É:", reply_markup=keyboard)
    await state.set_state(OrderDelivery.waiting_for_delivery_number.state)


async def delivery_info(message: types.Message, state: FSMContext):
    await state.update_data(delivery_number=message.text)
    if message.text!='–û—Ç–º–µ–Ω–∞':
        delivery=BotDB.get_delivery(message.text)

        await message.answer(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ:\n"
                            f"–ù–æ–º–µ—Ä-{delivery[9]}\n"
                            f"–ó–∞–∫–∞–∑—á–∏–∫-{BotDB.get_user(delivery[7])[4]}\n"
                             f"–ü—Ä–∏–Ω—è—Ç –≤ —Ä–∞–±–æ—Ç—É-{delivery[11]}\n"
                             f"–°—Ä–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏-{delivery[10]}\n"
                             f"–ê–¥—Ä–µ—Å—Å –¥–æ—Å—Ç–∞–≤–∫–∏-{' '.join(BotDB.get_delivery_point(delivery[8]))}\n"
                             f"–°—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏-{delivery[1]}\n"
                             f"–°—Ç–∞—Ç—É—Å-{delivery[4]}\n")
        await message.bot.send_message(message.from_user.id,f"–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å?",reply_markup=courierbot.kb.menu_delivery_info)
        await state.set_state(OrderDelivery.waiting_for_change_delivery_status.state)
    else:
        await state.finish()
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=types.ReplyKeyboardRemove())
        await message.bot.send_message(message.from_user.id,
                                       "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é",
                                       reply_markup=courierbot.kb.menu)


async  def change_delivery_status (message: types.Message, state: FSMContext):
    await state.update_data(change=message.text)
    user_data=await state.get_data()
    if message.text == 'üìù –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ':
        status='delivered'
        BotDB.change_delivery_status(user_data['delivery_number'],'delivered')
        print(BotDB.get_delivery(user_data['delivery_number'])[1])
        BotDB.change_balance(BotDB.get_user_id(message.chat.id),BotDB.get_delivery(user_data['delivery_number'])[1])

        await message.answer(f"–°—Ç–∞—Ç—É—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {status}", reply_markup=types.ReplyKeyboardRemove())

    else:
        await message.answer(f"–°—Ç–∞—Ç—É—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –æ—Å—Ç–∞–ª—Å—è on_work", reply_markup=types.ReplyKeyboardRemove())
    deliveres = BotDB.get_deliveres_on_work(BotDB.get_user_id(message.chat.id))
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for delivery in BotDB.get_deliveres_on_work(BotDB.get_user_id(message.chat.id)):
        keyboard.add(str(delivery[9]))
    keyboard.add('–û—Ç–º–µ–Ω–∞')
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç–∞–≤–∫—É:", reply_markup=keyboard)
    await state.set_state(OrderDelivery.waiting_for_delivery_number.state)



def register_handlers_delivery(dp: Dispatcher):
    dp.register_callback_query_handler(delivery_start ,lambda callback_query: callback_query.data == "delivery",state="*")

    dp.register_message_handler(delivery_info, state=OrderDelivery.waiting_for_delivery_number)
    dp.register_message_handler(change_delivery_status, state=OrderDelivery.waiting_for_change_delivery_status)
    # dp.register_message_handler(spent_sum_chosen, state=OrderSpent.waiting_for_spent_sum)
